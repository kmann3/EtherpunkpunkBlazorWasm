@page "/fetchdata"
@using EtherpunkBlazorWasm.Shared
@inject HttpClient Http
@inject IJSRuntime jsr

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

(Anonymous Access)
@if (forecastThisWeek == null)
{
	<p><em>Loading... </em></p>
	if (!string.IsNullOrEmpty(messageThisWeek))
	{
		<p>Message: @messageThisWeek</p>
	}
}
else
{
	if (!string.IsNullOrEmpty(messageThisWeek))
	{
		<p>Message: @messageThisWeek</p>
	}
	<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
			@foreach (var forecast in forecastThisWeek)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
(Logged in access)
@if (string.IsNullOrEmpty(userData))
{
	<p>Unauthorized</p>
} 
else
{
	if (forecastNextWeek == null)
	{
		<p><em>Loading...</em></p>
		<p><a href="javascript:;" @onclick="GetNextWeeksForecast">Get This Week's Forecast</a></p>
		if (!string.IsNullOrEmpty(messageNextWeek))
		{
			<p>Message: @messageNextWeek</p>
		}
	}
	else
	{
		if (!string.IsNullOrEmpty(messageNextWeek))
		{
			<p>Message: @messageNextWeek</p>
		}
		<p><a href="javascript:;" @onclick="GetNextWeeksForecast">This Week's Forecast</a></p>
				<table class="table">
					<thead>
						<tr>
							<th>Date</th>
							<th>Temp. (C)</th>
							<th>Temp. (F)</th>
							<th>Summary</th>
							<th>User</th>
						</tr>
					</thead>
					<tbody>
				@foreach (var forecast in forecastNextWeek)
				{
								<tr>
									<td>@forecast.Date.ToShortDateString()</td>
									<td>@forecast.TemperatureC</td>
									<td>@forecast.TemperatureF</td>
									<td>@forecast.Summary</td>
								</tr>
				}
					</tbody>
				</table>
	}
}

<hr />
(Admin Access)
@if (string.IsNullOrEmpty(userData))
{
	<p>Unauthorized</p>
}
else
{
	if (forecastLastWeek == null)
	{
		<p><em>Loading...</em></p>
		if (!string.IsNullOrEmpty(messageLastWeek))
		{
			<p>Message: @messageLastWeek</p>
		}
		<p><a href="javascript:;" @onclick="GetLastWeeksForecast">Tomorrow's Forecast</a></p>
	}
	else
	{
		if (!string.IsNullOrEmpty(messageLastWeek))
		{
			<p>Message: @messageLastWeek</p>
		}
		<p><a href="javascript:;" @onclick="GetLastWeeksForecast">Tomorrow's Forecast</a></p>
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Temp. (C)</th>
					<th>Temp. (F)</th>
					<th>Summary</th>
					<th>User</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var forecast in forecastLastWeek)
				{
					<tr>
						<td>@forecast.Date.ToShortDateString()</td>
						<td>@forecast.TemperatureC</td>
						<td>@forecast.TemperatureF</td>
						<td>@forecast.Summary</td>
					</tr>
				}
			</tbody>
		</table>
	}
}

@code {

	private List<WeatherForecast>? forecastThisWeek;
	private List<WeatherForecast>? forecastNextWeek;
	private List<WeatherForecast>? forecastLastWeek;
	string messageThisWeek = String.Empty;
	string messageNextWeek = String.Empty;
	string messageLastWeek = String.Empty;

	private string userData = String.Empty;

	private async Task GetNextWeeksForecast()
	{
		var response = await GetWeatherForecast("/api/weather/nextweek");
		if(response.weather != null)
		{
			forecastNextWeek = response.weather;
		} else
		{
			messageNextWeek = response.message;
		}
	}
	private async Task GetLastWeeksForecast()
	{
		var response = await GetWeatherForecast("/api/weather/lastweek");
		if (response.weather != null)
		{
			forecastLastWeek = response.weather;
			messageLastWeek = response.message;
		}
		else
		{
			messageLastWeek = response.message;
		}
	}

	private async Task<(string message, List<WeatherForecast>? weather)> GetWeatherForecast(string uri)
	{
		var data = await Client.Auth.ApiHandler.GetApiDataAsync<WeatherForecast>(uri, jsr, Http);
		if (data.HttpResponse?.IsSuccessStatusCode == true)
		{
			return ($"{data.HttpResponseCode.ToString()} / {data.ErrorData?.Message} / {data.ErrorData?.Exception}", data.Data);
		}
		else
		{
			return ($"{data.HttpResponseCode.ToString()} / {data.ErrorData?.Message} / {data.ErrorData?.Exception}", null);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		userData = await Client.Auth.Jwt.GetJWT(jsr);

		var response = await GetWeatherForecast("/api/weather/thisweek");
		if (response.weather != null)
		{
			forecastThisWeek = response.weather;
			messageThisWeek = response.message;
		}
		else
		{
			messageThisWeek = response.message;
		}


		if (!string.IsNullOrEmpty(userData))
		{
			GetNextWeeksForecast();
			GetLastWeeksForecast();

			await GetNextWeeksForecast();
			await GetLastWeeksForecast();
		}

	}
}