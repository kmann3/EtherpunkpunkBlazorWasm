@page "/admin/roles"
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav
@using EtherpunkBlazorWasm.Shared
@using Microsoft.AspNetCore.Authorization;
<h3>Role Administration</h3>

@if(isAccessGranted == false)
{
    <p>You are not authorized to be here. Ruh roh!</p>
    if(!string.IsNullOrEmpty(message))
    {
        <p>Message: @((MarkupString)message)</p>
    }
    return;
}
@if (RoleList == null)
{
    <p><em>Loading... </em></p>
}
else
{
    if(!string.IsNullOrEmpty(message))
    {
        <p>Message: @message</p>
    }
    <table class="table table-striped">
      <thead>
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Users</th>
           <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach(var role in RoleList) {
            <tr>
              <td>@role.Name (@role.UserList.Count users)</td>
                <td>
                    @foreach(var user in role.UserList)
                    {
                            <a href="/admin/user/@user.Id">@user.Name</a>
                            <span title="Remove this user from role"><i class="fa-solid fa-user-slash"></i></span>
                        <br />
                    }
                </td>
                    <td>
                        <a class="btn btn-info">Add A User</a>
                        <a class="btn btn-info">Rename Role</a>
                        <a class="btn btn-danger" @onclick="() => DeleteRole(role.Id, role.Name)">Delete</a>
                    </td>
            </tr>
        }
      </tbody>
    </table>

    <p>Role Count: @RoleList.Count</p>
}

@if (DeleteDialogIsOpen)
{
   <ConfirmDeleteDialog
           Message="@deleteDialogMessage"
           OnClose="@OnDeleteDialogClose">
   </ConfirmDeleteDialog>
}
@if (RenameDialogIsOpen)
{
    <RenameRoleDialog
        Message="@renameDialogMessage"
        OnClose="@OnRenameDialogClose">
    </RenameRoleDialog>
}
@code {
    private List<RoleModel>? RoleList { get; set; }
    private string? userData;
    private string? message;
    private bool? isAccessGranted = null;

    private bool DeleteDialogIsOpen = false;
    private string deleteDialogMessage = String.Empty;

    private bool RenameDialogIsOpen = false;
    private string renameDialogMessage = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userData = await Client.Auth.Jwt.GetJWT(jsr);

        // Validate user auth to make sure they can be here
        // Get list roles and users
        var response = await GetRolesApi();

        if (response.isSuccess)
        {
            isAccessGranted = true;
            RoleList = response.roleList;
        } else
        {
            isAccessGranted = false;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    private async void AddUserToRole()
    {
        UserRole ur = new()
        {
            RoleId = Guid.NewGuid(),
            UserId = Guid.NewGuid()
        };

        var response = await Client.Auth.ApiHandler<RoleModel>.GetApiDataAsync("api/auth/addUserToRole", jsr, Http);
    }

    /// <summary>
    /// 
    /// </summary>
    private async void RemoveUserFromRole()
    {
        UserRole ur = new()
            {
                RoleId = Guid.NewGuid(),
                UserId = Guid.NewGuid()
            };

        var response = await Client.Auth.ApiHandler<RoleModel>.GetApiDataAsync("api/auth/removeUserFromRole", jsr, Http);
    }

    private async void CreateNewRole()
    {
        var response = await Client.Auth.ApiHandler<string>.GetApiDataAsync("api/auth/removeUserFromRole", jsr, Http);
    }

    private void DeleteRole(Guid roleId, string roleName)
    {
        DeleteDialogIsOpen = true;
        deleteDialogMessage = $"Are you sure you want to delete role `{roleName}`?";
    }

    private async Task OnDeleteDialogClose(bool confirmDelete)
    {
        if(confirmDelete)
        {
            var response = await Client.Auth.ApiHandler<bool>.GetApiDataAsync("api/auth/deleteRole", jsr, Http);
            // Refresh list
            message = "TO BE IMPLEMENTED!";

        }

        DeleteDialogIsOpen = false;
    }

    private async Task OnRenameDialogClose(RenameRoleDialog.ReturnAction returnData)
    {
        if(!returnData.DidCancel)
        {
            var response = await Client.Auth.ApiHandler<bool>.GetApiDataAsync("api/auth/renameRole", jsr, Http);
            // Refresh list
            message = "TO BE IMPLEMENTED!";
        }
    }

    /// <summary>
    /// Get's a list of roles and a list of users within those roles.
    /// </summary>
    /// <returns>Returns (bool, List<RoleModel>?) where bool is whether the request was successful and if it was gives the data.</returns>
    private async Task<(bool isSuccess, List<RoleModel>? roleList)> GetRolesApi()
    {
        var response = await Client.Auth.ApiHandler<RoleModel>.GetApiDataAsync("/api/auth/roleList", jsr, Http);
        if(response.HttpResponse?.IsSuccessStatusCode == true)
        {
            return (true,response.Data);
        } else
        {
            message  = $"HttpResponse.StatusCode: {response.HttpResponse?.StatusCode}<hr />";
        }

        return (false, null);
    }
}
