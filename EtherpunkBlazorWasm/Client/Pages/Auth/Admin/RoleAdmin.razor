@page "/admin/roles"
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav
@using EtherpunkBlazorWasm.Shared
@using Microsoft.AspNetCore.Authorization;
<h3>Role Administration</h3>

@if(isAccessGranted == false)
{
    <p>You are not authorized to be here. Ruh roh!</p>
    if(!string.IsNullOrEmpty(message))
    {
        <p>Message: @((MarkupString)message)</p>
    }
    return;
}
@if (RoleList == null)
{
    <p><em>Loading... </em></p>
}
else
{
    if(!string.IsNullOrEmpty(message))
    {
        <p>Message: @((MarkupString)message)</p>
    }

    <a class="btn btn-primary" @onclick="() => CreateRole()">Create Role</a>

    <table class="table table-striped">
      <thead>
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Users</th>
           <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach(var role in RoleList) {
            <tr>
              <td>@role.Name (@role.UserList.Count users)</td>
                <td>
                    @foreach(var user in role.UserList)
                    {
                        <a href="/admin/user/@user.Id">@user.Name</a>
                        <a class="btn btn-primary">Remove User From Role</a>
                        <br />
                    }
                </td>
                    <td>
                        <a class="btn btn-primary">Add A User</a>
                        <a class="btn btn-primary" @onclick="() => RenameRole(role)">Rename Role</a>
                    </td>
            </tr>
        }
      </tbody>
    </table>

    <p>Role Count: @RoleList.Count</p>

    @if (createRoleDialogIsOpen)
    {
        <CreateRoleDialog Message="@createRoleDialogMessage"
                          OnClose="@OnCreateRoleDialogClose">
        </CreateRoleDialog>
    }

    @if (renameRoleDialogIsOpen)
    {
        <RenameRoleDialog Role="@renameRoleData"
                          OnClose="@OnRenameRoleDialogClose">
        </RenameRoleDialog>
    }
}


@code {
    private List<RoleModel>? RoleList { get; set; }
    private string? userData;
    private string? message;

    private bool? isAccessGranted = null;


    /// <summary>
    /// Page load stuff.
    /// - Get user token data
    /// - Get list of roles
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userData = await Client.Auth.Jwt.GetJWT(jsr);

        // Validate user auth to make sure they can be here
        // Get list roles and users
        var response = await Client.Auth.ApiHandler.GetApiDataListAsync<RoleModel>("/api/auth/roleList", jsr, Http);

        if (response.HttpResponse?.IsSuccessStatusCode == true)
        {
            isAccessGranted = true;
            RoleList = response.Data.OrderBy(x => x.Name).ToList();
        } else
        {
            isAccessGranted = false;
        }
    }

    // Get roles
    // Remove a user from a specific role: 
    // Add a user to a role
    // Rename a role
    // Delete a role
    #region Create Role
    private bool createRoleDialogIsOpen = false;
    private string createRoleDialogMessage = String.Empty;

    private void CreateRole()
    {
        createRoleDialogIsOpen = true;
        createRoleDialogMessage = $"What will the role be called?";
    }

    private async Task OnCreateRoleDialogClose(CreateRoleDialog.ReturnAction returnData)
    {
        createRoleDialogIsOpen = false;
        if (!returnData.DidCancel)
        {
            var response = await Client.Auth.ApiHandler.PostApiDataAsync<string, Guid>("api/auth/createRole", returnData.RoleName, jsr, Http);

            if (response.HttpResponse?.IsSuccessStatusCode != true || response.Data == Guid.Empty)
            {
                message += $"Could not add group.";
                return;
            }

            RoleList?.Add(new RoleModel()
                {
                    Id = response.Data,
                    Name = returnData.RoleName
                });
            RoleList = RoleList?.OrderBy(x => x.Name).ToList();
        }
    }
    #endregion Create Role

    #region Rename Role
    private bool renameRoleDialogIsOpen = false;
    private RoleModel? renameRoleData = null;

    private void RenameRole(RoleModel role)
    {
        renameRoleDialogIsOpen = true;
        renameRoleData = role;
    }

    private async Task OnRenameRoleDialogClose(RenameRoleDialog.ReturnAction returnData)
    {
        renameRoleDialogIsOpen = false;
        if(!returnData.DidCancel)
        {
            if (returnData.WasSuccess)
            {
                RoleList.Find(x => x.Id == returnData.NewRoleInfo.Id).Name = returnData.NewRoleInfo.Name;
            } else
            {
                message += "Error renaming role!";
            }
        }
    }
    #endregion Rename Role
}
