@page "/admin/roles"
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav
@using EtherpunkBlazorWasm.Shared
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Adminz")];

<h3>Role Administration</h3>
@if(!string.IsNullOrEmpty(message))
{
    <p>Message: @message</p>
}
@if (RoleList == null)
{
    <p><em>Loading... </em></p>
}
else
{
    <table class="table table-striped">
      <thead>
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Users</th>
           <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach(var role in RoleList) {
            <tr>
              <td>@role.Name (@role.UserList.Count users)</td>
                <td>
                    @foreach(var user in role.UserList)
                    {
                            <a href="/admin/user/@user.Id">@user.Name</a>
                            <span title="Remove this user from role"><i class="fa-solid fa-user-slash"></i></span>
                        <br />
                    }
                </td>
                    <td>
                        <span title="Add a user"><i class="fa-solid fa-user-plus"></i></span> | 
                        <span title="Edit role name"><i class="fa-solid fa-pencil"></i></span> | 
                        <span title="Expire all tokens"><i class="fa-solid fa-user-xmark"></i></span> | 
                        <span title="Delete role"><i class="fa-solid fa-trash"></i></span>
                    </td>
            </tr>
        }
      </tbody>
    </table>

    <p>Role Count: @RoleList.Count</p>
}

@code {
    //NOTE: @attribute [Authorize(Roles = "Adminz")]; // DOES NOT SEEM TO WORK. DO NOT KNOW WHY.
    List<RoleModel>? RoleList { get; set; }
    string? userData;
    string? message;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userData = await Client.Auth.Jwt.GetJWT(jsr);

        // Validate user auth to make sure they can be here
        // Get list roles and users
        var response = await GetRolesApi();

        if (response.accessGranted)
        {
            RoleList = response.roleList;
        }
    }

    private async void AddUserToRole()
    {

    }

    private async Task<(bool accessGranted, List<RoleModel>? roleList)> GetRolesApi()
    {
        var response = await Client.Auth.ApiHandler<RoleModel>.GetApiDataAsync("/api/auth/rolelist", jsr, Http);
        if(response.HttpResponse?.IsSuccessStatusCode == true)
        {
            return (true,response.Data);
        } else
        {
            message = $"{response.ErrorData?.Message} / {response.ErrorData?.Exception}";
        }

        return (false, null);
    }

    //private async Task<(bool accessGranted, string error, List<RoleModel>? roleList)> GetRolesApi()
    //{
    //    bool accessGranted = false;
    //    string error = string.Empty;
    //    List<RoleModel>? roleList = null;
    //    try
    //    {
    //        var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"/api/auth/rolelist");
    //        requestMsg.Headers.Add("Authorization", "Bearer " + userData);
    //        var response = await Http.SendAsync(requestMsg);
    //        switch (response.StatusCode)
    //        {
    //            case System.Net.HttpStatusCode.Unauthorized:
    //                await jsr.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
    //                userData = null;
    //                error = "Unauthroized, token expired?";
    //                break;
    //            case System.Net.HttpStatusCode.Forbidden:
    //                error = "Not allowed to see this!";
    //                break;
    //            case System.Net.HttpStatusCode.NoContent:
    //                break;
    //            case System.Net.HttpStatusCode.InternalServerError:
    //                error = $"Internal Server Error: {response.Content}";
    //                break;
    //            default:
    //                break;
    //        }
    //        if (response.IsSuccessStatusCode)
    //        {
    //            accessGranted = true;
    //            roleList = await response.Content.ReadFromJsonAsync<List<RoleModel>>();
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        error = ex.ToString();
    //    }

    //    return (accessGranted, error, roleList);
    //}
}
