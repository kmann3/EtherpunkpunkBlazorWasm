@page "/login"
@page "/login/{redirectUrl}"
@using EtherpunkBlazorWasm.Shared
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav

<h3>Login</h3>

<p>@message</p>

<EditForm Model="user" OnValidSubmit="OnValid" style="max-width:500px;">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-2">
		<InputText class="form-control" @bind-Value="user.Email" placeholder="Enter Email"></InputText>
	</div>
	<div class="mb-2">
		<InputText type="password" class="form-control" @bind-Value="user.Password" placeholder="Enter Password"></InputText>
	</div>
	<div class="mb-2 text-right">
		<button class="btn btn-secondary" disabled="@isDisabled">login</button>
	</div>
</EditForm>

@code {
	LoginModel user = new LoginModel();
	string message = string.Empty;
	bool isDisabled = false;

	[Parameter]
	public string redirectUrl { get; set; }

	protected override Task OnInitializedAsync()
	{
		return base.OnInitializedAsync();
	}

	private async Task OnValid()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<LoginModel>("/api/auth/login", user, System.Threading.CancellationToken.None))
		{
			if (msg.IsSuccessStatusCode)
			{
				LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
				isDisabled = false;
				if (result.Success)
					await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.Email};{result.JwtBearer}").ConfigureAwait(false);
				else
				{
					// Incorrect username/password most likely
					message = result?.Message;
					return;
				}

				if (!string.IsNullOrEmpty(redirectUrl))
				{
					nav.NavigateTo($"/{redirectUrl}", true);
				}
				else
				{
					nav.NavigateTo("/", true);
				}
			} else
			{
				// The main way to land here is if something is misconfigured or a typo.
				message = $"ERROR LOGGING IN - {msg.StatusCode}";
			}
		}
	}
}
