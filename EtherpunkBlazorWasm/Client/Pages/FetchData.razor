@page "/fetchdata"
@using EtherpunkBlazorWasm.Shared
@inject HttpClient Http
@inject IJSRuntime jsr

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

(Anonymous Access)
@if (forecastWeek == null)
{
	<p><em>Loading... </em></p>
	if(!string.IsNullOrEmpty(messageWeek))
	{
		<p>Message: @messageWeek</p>
	}
}
else
{
	if (!string.IsNullOrEmpty(messageWeek))
	{
		<p>Message: @messageWeek</p>
	}
	<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
			@foreach (var forecast in forecastWeek)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
(Logged in access)
@if (string.IsNullOrEmpty(userData))
{
	<p>Unauthorized</p>
} 
else
{
	if (forecastToday == null)
	{
		<p><em>Loading...</em></p>
		<p><a href="javascript:;" @onclick="GetTodaysForecast">Today's Forecast</a></p>
		if (!string.IsNullOrEmpty(messageToday))
		{
			<p>Message: @messageToday</p>
		}
	}
	else
	{
		if (!string.IsNullOrEmpty(messageToday))
		{
			<p>Message: @messageToday</p>
		}
		<p><a href="javascript:;" @onclick="GetTodaysForecast">Today's Forecast</a></p>
				<table class="table">
					<thead>
						<tr>
							<th>Date</th>
							<th>Temp. (C)</th>
							<th>Temp. (F)</th>
							<th>Summary</th>
							<th>User</th>
						</tr>
					</thead>
					<tbody>
				@foreach (var forecast in forecastToday)
				{
								<tr>
									<td>@forecast.Date.ToShortDateString()</td>
									<td>@forecast.TemperatureC</td>
									<td>@forecast.TemperatureF</td>
									<td>@forecast.Summary</td>
								</tr>
				}
					</tbody>
				</table>
	}
}

<hr />
(Admin Access)
@if (string.IsNullOrEmpty(userData))
{
	<p>Unauthorized</p>
}
else
{
	if (forecastTomorrow == null)
	{
		<p><em>Loading...</em></p>
		if (!string.IsNullOrEmpty(messageTomorrow))
		{
			<p>Message: @messageTomorrow</p>
		}
		<p><a href="javascript:;" @onclick="GetTomorrowsForecast">Tomorrows's Forecast</a></p>
	}
	else
	{
		if (!string.IsNullOrEmpty(messageTomorrow))
		{
			<p>Message: @messageTomorrow</p>
		}
		<p><a href="javascript:;" @onclick="GetTomorrowsForecast">Tomorrows's Forecast</a></p>
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Temp. (C)</th>
					<th>Temp. (F)</th>
					<th>Summary</th>
					<th>User</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var forecast in forecastTomorrow)
				{
					<tr>
						<td>@forecast.Date.ToShortDateString()</td>
						<td>@forecast.TemperatureC</td>
						<td>@forecast.TemperatureF</td>
						<td>@forecast.Summary</td>
					</tr>
				}
			</tbody>
		</table>
	}
}

@code {

	private List<WeatherForecast> forecastWeek;
	private List<WeatherForecast> forecastToday;
	private List<WeatherForecast> forecastTomorrow;
	string messageWeek = "";
	string messageToday = "";
	string messageTomorrow = "";

	private string userData = string.Empty;

	private async Task GetTodaysForecast()
	{
		var data = await Client.Auth.ApiHandler<WeatherForecast>.GetApiDataAsync($"/api/weatherforecast/today", jsr, Http);
		if (data.HttpResponse?.IsSuccessStatusCode == true)
		{
			forecastToday = data.Data;
		} else
		{
			messageToday = $"{data.HttpResponseCode.ToString()} / {data.ErrorData?.Message} / {data.ErrorData?.Exception}";
		}

	}
	private async Task GetTomorrowsForecast()
	{
		var data = await Client.Auth.ApiHandler<WeatherForecast>.GetApiDataAsync($"/api/weatherforecast/tomorrow", jsr, Http);
		if (data.HttpResponse?.IsSuccessStatusCode == true)
		{
			forecastTomorrow = data.Data;
		}
		else
		{
			messageTomorrow = $"{data.HttpResponseCode.ToString()} / {data.ErrorData?.Message} / {data.ErrorData?.Exception}";
		}

	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var data = await Client.Auth.ApiHandler<WeatherForecast>.GetApiDataAsync($"/api/weatherforecast", jsr, Http);
		if (data.HttpResponse?.IsSuccessStatusCode == true)
		{
			forecastWeek = data.Data;
		}
		else
		{
			messageWeek = $"{data.HttpResponseCode.ToString()} / {data.ErrorData?.Message} / {data.ErrorData?.Exception}";
		}

		userData = await Client.Auth.Jwt.GetJWT(jsr);

		if (!string.IsNullOrEmpty(userData))
		{
			GetTodaysForecast();
			GetTomorrowsForecast();

			await GetTodaysForecast();
			await GetTomorrowsForecast();
		}

	}
}